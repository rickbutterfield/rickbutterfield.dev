---
import { Marked, marked } from 'marked';
import { markedHighlight } from "marked-highlight";
import hljs from 'highlight.js';
import 'highlight.js/styles/github-dark.css';
import Page from '@/layouts/Page.astro';
import { OpenAPI, ContentResource, type BlogPostContentModel } from '@/api';
const baseUrl = import.meta.env.PUBLIC_BASE_URL_HTTPS

export async function getStaticPaths() {
  OpenAPI.BASE = import.meta.env.PUBLIC_BASE_URL;

  const posts = await ContentResource.getContent20({
    filter: ['contentType:blogPost'],
    expand: 'all'
  })

  return posts.items.map((page: BlogPostContentModel) => {
    const urlSplit = page.route.path.split('/');

    return {
      params: { slug: urlSplit[urlSplit.length - 1] },
      props: {
        name: page.name,
        title: page.properties.title,
        content: page.properties.content,
        slug: page.route.path,
        publishedDate: new Date(page.properties.publishedDate),
        grid: page.properties.grid
      }
    }
  });
}

let path = Astro.url.pathname;
path = path.slice(0, -1);

const customMarked = new Marked(
  markedHighlight({ 
    langPrefix: 'hljs language-',
    highlight(code, lang, info) {
      const language = hljs.getLanguage(lang) ? lang : 'plaintext';
      return hljs.highlight(code, { language }).value;
    }
  })
)

const { title, slug, name, content, publishedDate, grid } = Astro.props
---

<Page name={title} image={`/og${path}.png`}>
  <article>
    <div style={`view-transition-name: article-${slug}`}>
      <h1>{title}</h1>
      <ul class="date text-muted text-uppercase">
        <li>
          <time datetime={publishedDate.toISOString()}>
            {publishedDate.toLocaleDateString('en-gb', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
            })}
          </time>
        </li>
        <!-- <li role="presentation">|</li>
        <li>
            {getReadingTime(post.body)}
        </li> -->
      </ul>  
    </div>

    {grid?.items.map(item => {
      if (item.content !== null) {
        if (item.content?.contentType === 'richText') {
          const typedContent = item.content as RichTextElementModel;
          if (typedContent != null) {
            return <div set:html={customMarked.parse(typedContent.properties?.content)}></div>
          }
        }
        
        if (item.content?.contentType === 'imageWithCaption') {
          const typedContent = item.content as ImageWithCaptionElementModel;
          if (typedContent != null) {
            return (
              <figure class="c-figure">
                <img src=`${baseUrl}${typedContent.properties.image[0]?.url}?format=webp&width=1680` alt={typedContent.properties.image[0]?.properties?.altText}>
                <figcaption>{typedContent.properties.caption}</figcaption>
              </figure>
            )
          }
        }

        if (item.content?.contentType === 'updateAlert') {
          const typedContent = item.content as UpdateAlertElementModel;
          if (typedContent != null) {
            const updateDate = new Date(typedContent.properties?.date);

            return (
              <aside class="c-alert c-alert--update">
                <ul class="date text-muted text-uppercase">
                  <li>
                    <time datetime={updateDate.toISOString()}>
                      {updateDate.toLocaleDateString('en-gb', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric',
                      })}
                      </time>
                  </li>  
                </ul>
                <div set:html={customMarked.parse(typedContent.properties?.content)}></div>
              </aside>
            )
          }
        }
      }
    })}

  </article>
</Page>
