---
import { Marked } from 'marked';
import { markedHighlight } from "marked-highlight";
import hljs from 'highlight.js';
import 'highlight.js/styles/github-dark.css';
import Layout from '@/layouts/Layout.astro';
import { OpenAPI, ContentResource, type BlogPostContentModel, type UpdateAlertElementModel } from '@/api';
import RichText from '@/components/blocks/RichText.astro';
import ImageWithCaption from '@/components/blocks/ImageWithCaption.astro';
import UpdateAlert from '@/components/blocks/UpdateAlert.astro';


export async function getStaticPaths() {
  OpenAPI.BASE = import.meta.env.PUBLIC_BASE_URL;

  const posts = await ContentResource.getContent20({
    filter: ['contentType:blogPost'],
    expand: 'all'
  })

  return posts.items.map((page: BlogPostContentModel) => {
    const urlSplit = page.route.path.split('/');

    return {
      params: { slug: urlSplit[urlSplit.length - 1] },
      props: {
        name: page.name,
        title: page.properties.title,
        content: page.properties.content,
        slug: page.route.path,
        publishedDate: new Date(page.properties.publishedDate),
        grid: page.properties.grid
      }
    }
  });
}

let path = Astro.url.pathname;
path = path.slice(0, -1);

const customMarked = new Marked(
  markedHighlight({ 
    langPrefix: 'hljs language-',
    highlight(code, lang, info) {
      const language = hljs.getLanguage(lang) ? lang : 'plaintext';
      return hljs.highlight(code, { language }).value;
    }
  })
)

const { title, slug, name, content, publishedDate, grid } = Astro.props
---

<Layout name={title} image={`/og${path}.png`}>
  <article class="mt-8">
    <div style={`view-transition-name: article-${slug}`}>
      <h1 class="mb-1">{title}</h1>
      <ul class="text-gray-600">
        <li>
          <time datetime={publishedDate.toISOString()}>
            {publishedDate.toLocaleDateString('en-gb', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
            })}
          </time>
        </li>
      </ul>  
    </div>

    {grid?.items.map(item => {
      if (item.content !== null) {
        if (item.content?.contentType === 'richText') {
          return <RichText data={item.content} />
        }
        
        if (item.content?.contentType === 'imageWithCaption') {
          return <ImageWithCaption data={item.content} />
        }

        if (item.content?.contentType === 'updateAlert') {
          return <UpdateAlert data={item.content} />
        }
      }
    })}

  </article>
</Layout>
