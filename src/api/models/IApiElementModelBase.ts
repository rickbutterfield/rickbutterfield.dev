/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Delivery API
 * You can find out more about the Umbraco Delivery API in [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api).
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
     ImageWithCaptionElementModelFromJSONTyped,
     PageContentElementModelFromJSONTyped,
     PageSettingsElementModelFromJSONTyped,
     RichTextElementModelFromJSONTyped
} from './index';

/**
 * 
 * @export
 * @interface IApiElementModelBase
 */
export interface IApiElementModelBase {
    /**
     * 
     * @type {string}
     * @memberof IApiElementModelBase
     */
    readonly id?: string;
    /**
     * 
     * @type {string}
     * @memberof IApiElementModelBase
     */
    readonly contentType?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof IApiElementModelBase
     */
    readonly properties?: { [key: string]: any; };
}

/**
 * Check if a given object implements the IApiElementModelBase interface.
 */
export function instanceOfIApiElementModelBase(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function IApiElementModelBaseFromJSON(json: any): IApiElementModelBase {
    return IApiElementModelBaseFromJSONTyped(json, false);
}

export function IApiElementModelBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): IApiElementModelBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['contentType'] === 'imageWithCaption') {
            return ImageWithCaptionElementModelFromJSONTyped(json, true);
        }
        if (json['contentType'] === 'pageContent') {
            return PageContentElementModelFromJSONTyped(json, true);
        }
        if (json['contentType'] === 'pageSettings') {
            return PageSettingsElementModelFromJSONTyped(json, true);
        }
        if (json['contentType'] === 'richText') {
            return RichTextElementModelFromJSONTyped(json, true);
        }
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'contentType': !exists(json, 'contentType') ? undefined : json['contentType'],
        'properties': !exists(json, 'properties') ? undefined : json['properties'],
    };
}

export function IApiElementModelBaseToJSON(value?: IApiElementModelBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
    };
}

