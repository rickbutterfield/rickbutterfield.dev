/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Delivery API
 * You can find out more about the Umbraco Delivery API in [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api).
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RichTextModelBlocksInner } from './RichTextModelBlocksInner';
import {
    RichTextModelBlocksInnerFromJSON,
    RichTextModelBlocksInnerFromJSONTyped,
    RichTextModelBlocksInnerToJSON,
} from './RichTextModelBlocksInner';

/**
 * 
 * @export
 * @interface RichTextModel
 */
export interface RichTextModel {
    /**
     * 
     * @type {string}
     * @memberof RichTextModel
     */
    markup?: string;
    /**
     * 
     * @type {Array<RichTextModelBlocksInner>}
     * @memberof RichTextModel
     */
    blocks?: Array<RichTextModelBlocksInner>;
}

/**
 * Check if a given object implements the RichTextModel interface.
 */
export function instanceOfRichTextModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RichTextModelFromJSON(json: any): RichTextModel {
    return RichTextModelFromJSONTyped(json, false);
}

export function RichTextModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): RichTextModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'markup': !exists(json, 'markup') ? undefined : json['markup'],
        'blocks': !exists(json, 'blocks') ? undefined : ((json['blocks'] as Array<any>).map(RichTextModelBlocksInnerFromJSON)),
    };
}

export function RichTextModelToJSON(value?: RichTextModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'markup': value.markup,
        'blocks': value.blocks === undefined ? undefined : ((value.blocks as Array<any>).map(RichTextModelBlocksInnerToJSON)),
    };
}

