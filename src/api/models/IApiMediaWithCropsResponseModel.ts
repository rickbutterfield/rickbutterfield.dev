/* tslint:disable */
/* eslint-disable */
/**
 * Umbraco Delivery API
 * You can find out more about the Umbraco Delivery API in [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api).
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ImageCropModel } from './ImageCropModel';
import {
    ImageCropModelFromJSON,
    ImageCropModelFromJSONTyped,
    ImageCropModelToJSON,
} from './ImageCropModel';
import type { ImageFocalPointModel } from './ImageFocalPointModel';
import {
    ImageFocalPointModelFromJSON,
    ImageFocalPointModelFromJSONTyped,
    ImageFocalPointModelToJSON,
} from './ImageFocalPointModel';

/**
 * 
 * @export
 * @interface IApiMediaWithCropsResponseModel
 */
export interface IApiMediaWithCropsResponseModel {
    /**
     * 
     * @type {string}
     * @memberof IApiMediaWithCropsResponseModel
     */
    readonly path?: string;
    /**
     * 
     * @type {Date}
     * @memberof IApiMediaWithCropsResponseModel
     */
    readonly createDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof IApiMediaWithCropsResponseModel
     */
    readonly updateDate?: Date;
    /**
     * 
     * @type {ImageFocalPointModel}
     * @memberof IApiMediaWithCropsResponseModel
     */
    focalPoint?: ImageFocalPointModel;
    /**
     * 
     * @type {Array<ImageCropModel>}
     * @memberof IApiMediaWithCropsResponseModel
     */
    readonly crops?: Array<ImageCropModel> | null;
    /**
     * 
     * @type {string}
     * @memberof IApiMediaWithCropsResponseModel
     */
    readonly id?: string;
    /**
     * 
     * @type {string}
     * @memberof IApiMediaWithCropsResponseModel
     */
    readonly name?: string;
    /**
     * 
     * @type {string}
     * @memberof IApiMediaWithCropsResponseModel
     */
    readonly mediaType?: string;
    /**
     * 
     * @type {string}
     * @memberof IApiMediaWithCropsResponseModel
     */
    readonly url?: string;
    /**
     * 
     * @type {string}
     * @memberof IApiMediaWithCropsResponseModel
     */
    readonly extension?: string | null;
    /**
     * 
     * @type {number}
     * @memberof IApiMediaWithCropsResponseModel
     */
    readonly width?: number | null;
    /**
     * 
     * @type {number}
     * @memberof IApiMediaWithCropsResponseModel
     */
    readonly height?: number | null;
    /**
     * 
     * @type {number}
     * @memberof IApiMediaWithCropsResponseModel
     */
    readonly bytes?: number | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof IApiMediaWithCropsResponseModel
     */
    readonly properties?: { [key: string]: any; };
}

/**
 * Check if a given object implements the IApiMediaWithCropsResponseModel interface.
 */
export function instanceOfIApiMediaWithCropsResponseModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function IApiMediaWithCropsResponseModelFromJSON(json: any): IApiMediaWithCropsResponseModel {
    return IApiMediaWithCropsResponseModelFromJSONTyped(json, false);
}

export function IApiMediaWithCropsResponseModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): IApiMediaWithCropsResponseModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'path': !exists(json, 'path') ? undefined : json['path'],
        'createDate': !exists(json, 'createDate') ? undefined : (new Date(json['createDate'])),
        'updateDate': !exists(json, 'updateDate') ? undefined : (new Date(json['updateDate'])),
        'focalPoint': !exists(json, 'focalPoint') ? undefined : ImageFocalPointModelFromJSON(json['focalPoint']),
        'crops': !exists(json, 'crops') ? undefined : (json['crops'] === null ? null : (json['crops'] as Array<any>).map(ImageCropModelFromJSON)),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'mediaType': !exists(json, 'mediaType') ? undefined : json['mediaType'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'extension': !exists(json, 'extension') ? undefined : json['extension'],
        'width': !exists(json, 'width') ? undefined : json['width'],
        'height': !exists(json, 'height') ? undefined : json['height'],
        'bytes': !exists(json, 'bytes') ? undefined : json['bytes'],
        'properties': !exists(json, 'properties') ? undefined : json['properties'],
    };
}

export function IApiMediaWithCropsResponseModelToJSON(value?: IApiMediaWithCropsResponseModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'focalPoint': ImageFocalPointModelToJSON(value.focalPoint),
    };
}

